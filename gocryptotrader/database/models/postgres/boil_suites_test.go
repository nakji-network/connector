// Code generated by SQLBoiler 3.5.0-gct (https://github.com/thrasher-corp/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package postgres

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AuditEvents", testAuditEvents)
	t.Run("Exchanges", testExchanges)
	t.Run("Scripts", testScripts)
}

func TestDelete(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsDelete)
	t.Run("Exchanges", testExchangesDelete)
	t.Run("Scripts", testScriptsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsQueryDeleteAll)
	t.Run("Exchanges", testExchangesQueryDeleteAll)
	t.Run("Scripts", testScriptsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsSliceDeleteAll)
	t.Run("Exchanges", testExchangesSliceDeleteAll)
	t.Run("Scripts", testScriptsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsExists)
	t.Run("Exchanges", testExchangesExists)
	t.Run("Scripts", testScriptsExists)
}

func TestFind(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsFind)
	t.Run("Exchanges", testExchangesFind)
	t.Run("Scripts", testScriptsFind)
}

func TestBind(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsBind)
	t.Run("Exchanges", testExchangesBind)
	t.Run("Scripts", testScriptsBind)
}

func TestOne(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsOne)
	t.Run("Exchanges", testExchangesOne)
	t.Run("Scripts", testScriptsOne)
}

func TestAll(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsAll)
	t.Run("Exchanges", testExchangesAll)
	t.Run("Scripts", testScriptsAll)
}

func TestCount(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsCount)
	t.Run("Exchanges", testExchangesCount)
	t.Run("Scripts", testScriptsCount)
}

func TestHooks(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsHooks)
	t.Run("Exchanges", testExchangesHooks)
	t.Run("Scripts", testScriptsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsInsert)
	t.Run("AuditEvents", testAuditEventsInsertWhitelist)
	t.Run("Exchanges", testExchangesInsert)
	t.Run("Exchanges", testExchangesInsertWhitelist)
	t.Run("Scripts", testScriptsInsert)
	t.Run("Scripts", testScriptsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsReload)
	t.Run("Exchanges", testExchangesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsReloadAll)
	t.Run("Exchanges", testExchangesReloadAll)
	t.Run("Scripts", testScriptsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsSelect)
	t.Run("Exchanges", testExchangesSelect)
	t.Run("Scripts", testScriptsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsUpdate)
	t.Run("Exchanges", testExchangesUpdate)
	t.Run("Scripts", testScriptsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AuditEvents", testAuditEventsSliceUpdateAll)
	t.Run("Exchanges", testExchangesSliceUpdateAll)
	t.Run("Scripts", testScriptsSliceUpdateAll)
}
