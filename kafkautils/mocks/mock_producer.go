// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nakji-network/connector/kafkautils (interfaces: ProducerInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	kafkautils "github.com/nakji-network/connector/kafkautils"
	gomock "github.com/golang/mock/gomock"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// MockProducerInterface is a mock of ProducerInterface interface.
type MockProducerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProducerInterfaceMockRecorder
}

// MockProducerInterfaceMockRecorder is the mock recorder for MockProducerInterface.
type MockProducerInterfaceMockRecorder struct {
	mock *MockProducerInterface
}

// NewMockProducerInterface creates a new mock instance.
func NewMockProducerInterface(ctrl *gomock.Controller) *MockProducerInterface {
	mock := &MockProducerInterface{ctrl: ctrl}
	mock.recorder = &MockProducerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerInterface) EXPECT() *MockProducerInterfaceMockRecorder {
	return m.recorder
}

// AbortTransaction mocks base method.
func (m *MockProducerInterface) AbortTransaction(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortTransaction indicates an expected call of AbortTransaction.
func (mr *MockProducerInterfaceMockRecorder) AbortTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTransaction", reflect.TypeOf((*MockProducerInterface)(nil).AbortTransaction), arg0)
}

// BeginTransaction mocks base method.
func (m *MockProducerInterface) BeginTransaction() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockProducerInterfaceMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockProducerInterface)(nil).BeginTransaction))
}

// CommitTransaction mocks base method.
func (m *MockProducerInterface) CommitTransaction(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockProducerInterfaceMockRecorder) CommitTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockProducerInterface)(nil).CommitTransaction), arg0)
}

// EnableTransactions mocks base method.
func (m *MockProducerInterface) EnableTransactions() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableTransactions")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableTransactions indicates an expected call of EnableTransactions.
func (mr *MockProducerInterfaceMockRecorder) EnableTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTransactions", reflect.TypeOf((*MockProducerInterface)(nil).EnableTransactions))
}

// InitTransactions mocks base method.
func (m *MockProducerInterface) InitTransactions(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitTransactions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitTransactions indicates an expected call of InitTransactions.
func (mr *MockProducerInterfaceMockRecorder) InitTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitTransactions", reflect.TypeOf((*MockProducerInterface)(nil).InitTransactions), arg0)
}

// WriteAndCommit mocks base method.
func (m *MockProducerInterface) WriteAndCommit(arg0 string, arg1 []byte, arg2 protoreflect.ProtoMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteAndCommit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteAndCommit indicates an expected call of WriteAndCommit.
func (mr *MockProducerInterfaceMockRecorder) WriteAndCommit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAndCommit", reflect.TypeOf((*MockProducerInterface)(nil).WriteAndCommit), arg0, arg1, arg2)
}

// WriteAndCommitSink mocks base method.
func (m *MockProducerInterface) WriteAndCommitSink(arg0 <-chan *kafkautils.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteAndCommitSink", arg0)
}

// WriteAndCommitSink indicates an expected call of WriteAndCommitSink.
func (mr *MockProducerInterfaceMockRecorder) WriteAndCommitSink(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAndCommitSink", reflect.TypeOf((*MockProducerInterface)(nil).WriteAndCommitSink), arg0)
}

// WriteKafkaMessages mocks base method.
func (m *MockProducerInterface) WriteKafkaMessages(arg0 string, arg1 []byte, arg2 protoreflect.ProtoMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteKafkaMessages", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteKafkaMessages indicates an expected call of WriteKafkaMessages.
func (mr *MockProducerInterfaceMockRecorder) WriteKafkaMessages(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteKafkaMessages", reflect.TypeOf((*MockProducerInterface)(nil).WriteKafkaMessages), arg0, arg1, arg2)
}
